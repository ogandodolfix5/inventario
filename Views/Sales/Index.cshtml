@model IEnumerable<InventarioMvc.Models.Sale>
@{
    ViewData["Title"] = "Ventas";
    var q = (string?)ViewData["q"] ?? "";
    var from = (string?)ViewData["from"] ?? "";
    var to = (string?)ViewData["to"] ?? "";
    decimal total = ViewData["TotalVentas"] is decimal d ? d : 0m;
    int count = ViewData["CantidadItems"] is int c ? c : 0;
}

<div class="container">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3 gap-2">
        <h1 class="mb-0">Ventas</h1>
        <div class="d-flex gap-2">
            <a class="btn btn-primary" asp-action="Create">+ Nueva venta</a>

            @* Exportar CSV con mismos filtros *@
            <form asp-action="ExportCsv" method="get" class="d-inline">
                <input type="hidden" name="q" value="@q" />
                <input type="hidden" name="from" value="@from" />
                <input type="hidden" name="to" value="@to" />
                <button class="btn btn-outline-success" type="submit">Exportar CSV</button>
            </form>

            @* Exportar XLSX con mismos filtros *@
            <form asp-action="ExportXlsx" method="get" class="d-inline">
                <input type="hidden" name="q" value="@q" />
                <input type="hidden" name="from" value="@from" />
                <input type="hidden" name="to" value="@to" />
                <button class="btn btn-outline-primary" type="submit">Exportar XLSX</button>
            </form>
        </div>
    </div>

    <form method="get" class="row g-2 mb-3" id="filterForm">
        <div class="col-md-4">
            <input class="form-control" name="q" value="@q" placeholder="Buscar por producto..." />
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="from" id="from" value="@from" />
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="to" id="to" value="@to" />
        </div>
        <div class="col-md-4 d-flex gap-2">
            <button class="btn btn-outline-secondary" type="submit">Filtrar</button>
            <a class="btn btn-outline-dark" asp-action="Index">Limpiar</a>
            <div class="btn-group" role="group" aria-label="Rangos rápidos">
                <button type="button" class="btn btn-sm btn-outline-primary" data-range="today">Hoy</button>
                <button type="button" class="btn btn-sm btn-outline-primary" data-range="7">Últ. 7 días</button>
                <button type="button" class="btn btn-sm btn-outline-primary" data-range="month">Mes actual</button>
            </div>
        </div>
    </form>

    <div class="alert alert-info mb-3">
        <div class="d-flex gap-3 flex-wrap">
            <div><strong>Ventas:</strong> @count</div>
            <div><strong>Total vendido:</strong> @total.ToString("C")</div>
            @if (!string.IsNullOrWhiteSpace(from) || !string.IsNullOrWhiteSpace(to))
            {
                <div><strong>Rango:</strong> @from — @to</div>
            }
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Producto</th>
                    <th class="text-end">Cantidad</th>
                    <th class="text-end">Precio unit.</th>
                    <th class="text-end">Total</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var s in Model)
            {
                <tr>
                    <td>@s.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@s.Product?.Name</td>
                    <td class="text-end">@s.Quantity</td>
                    <td class="text-end">@s.UnitPrice.ToString("C")</td>
                    <td class="text-end">@s.Total.ToString("C")</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        // Botones de rango rápido
        const btns = document.querySelectorAll('[data-range]');
        const from = document.getElementById('from');
        const to = document.getElementById('to');
        const form = document.getElementById('filterForm');

        function pad(n){ return n.toString().padStart(2,'0'); }
        function fmt(d){ return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`; }

        btns.forEach(b=>{
            b.addEventListener('click', ()=>{
                const now = new Date(); // local
                if (b.dataset.range === 'today') {
                    const d = fmt(now);
                    from.value = d; to.value = d;
                } else if (b.dataset.range === '7') {
                    const end = fmt(now);
                    const startDate = new Date(now); startDate.setDate(now.getDate() - 6);
                    from.value = fmt(startDate); to.value = end;
                } else if (b.dataset.range === 'month') {
                    const start = new Date(now.getFullYear(), now.getMonth(), 1);
                    const end = new Date(now.getFullYear(), now.getMonth()+1, 0);
                    from.value = fmt(start); to.value = fmt(end);
                }
                form.submit();
            });
        });
    </script>
}
